---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template for VPC
Parameters:
  SystemName:
    Description: System Name.
    Type: String
    Default: iobatch
  EnvType:
    Description: Environment Type.
    Type: String
    Default: dev
  VpcCidr:
    Description: VPC CIDR
    Type: String
    Default: 10.1.0.0/16
  AvailabilityZone1:
    Description: AvailabilityZone 1
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1a
  AvailabilityZone2:
    Description: AvailabilityZone 2
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1c
  AvailabilityZone3:
    Description: AvailabilityZone 3
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1d
  FrontendCidr1:
    Description: Frontend 1 Subnet CIDR
    Type: String
    Default: 10.1.11.0/24
  FrontendCidr2:
    Description: Frontend 2 Subnet CIDR
    Type: String
    Default: 10.1.12.0/24
  FrontendCidr3:
    Description: Frontend 3 Subnet CIDR
    Type: String
    Default: 10.1.13.0/24
  ApplicationCidr1:
    Description: Application 1 Subnet CIDR
    Type: String
    Default: 10.1.21.0/24
  ApplicationCidr2:
    Description: Application 2 Subnet CIDR
    Type: String
    Default: 10.1.22.0/24
  ApplicationCidr3:
    Description: Application 3 Subnet CIDR
    Type: String
    Default: 10.1.23.0/24
Resources:
  # VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${EnvType}-vpc
  # Internet Gateway
  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${EnvType}-igw
  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw
  # Subnet
  FrontendSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref FrontendCidr1
      Tags:
        - Key: Name
          Value: !Sub
            - ${SystemName}-${EnvType}-frontend-subnet-${AZ}
            - {AZ: !Select [2, !Split ['-', !Ref AvailabilityZone1]]}
  FrontendSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref FrontendCidr2
      Tags:
        - Key: Name
          Value: !Sub
            - ${SystemName}-${EnvType}-frontend-subnet-${AZ}
            - {AZ: !Select [2, !Split ['-', !Ref AvailabilityZone2]]}
  FrontendSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: !Ref FrontendCidr3
      Tags:
        - Key: Name
          Value: !Sub
            - ${SystemName}-${EnvType}-frontend-subnet-${AZ}
            - {AZ: !Select [2, !Split ['-', !Ref AvailabilityZone3]]}
  ApplicationSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref ApplicationCidr1
      Tags:
        - Key: Name
          Value: !Sub
            - ${SystemName}-${EnvType}-application-subnet-${AZ}
            - {AZ: !Select [2, !Split ['-', !Ref AvailabilityZone1]]}
  ApplicationSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref ApplicationCidr2
      Tags:
        - Key: Name
          Value: !Sub
            - ${SystemName}-${EnvType}-application-subnet-${AZ}
            - {AZ: !Select [2, !Split ['-', !Ref AvailabilityZone2]]}
  ApplicationSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: !Ref ApplicationCidr3
      Tags:
        - Key: Name
          Value: !Sub
            - ${SystemName}-${EnvType}-application-subnet-${AZ}
            - {AZ: !Select [2, !Split ['-', !Ref AvailabilityZone3]]}
  # NATGateway and EIP
  Natgw1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatgwEip1.AllocationId
      SubnetId: !Ref FrontendSubnet1
      Tags:
        - Key: Name
          Value: !Sub
            - ${SystemName}-${EnvType}-natgw-${AZ}
            - {AZ: !Select [2, !Split ['-', !Ref AvailabilityZone1]]}
  NatgwEip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  # RouteTable, Route, and SubnetRouteTableAssociation
  FrontendRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${EnvType}-frontend-rtb
  FrontendIgwRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIgw
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
      RouteTableId: !Ref FrontendRouteTable
  FrontendRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FrontendRouteTable
      SubnetId: !Ref FrontendSubnet1
  FrontendRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FrontendRouteTable
      SubnetId: !Ref FrontendSubnet2
  FrontendRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FrontendRouteTable
      SubnetId: !Ref FrontendSubnet3
  # Application1
  ApplicationRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${EnvType}-application-rtb
  ApplicationNatgwRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Natgw1
      RouteTableId: !Ref ApplicationRouteTable1
  ApplicationRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ApplicationRouteTable1
      SubnetId: !Ref ApplicationSubnet1
  # Application2
  ApplicationRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ApplicationRouteTable1
      SubnetId: !Ref ApplicationSubnet2
  # Application3
  ApplicationRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ApplicationRouteTable1
      SubnetId: !Ref ApplicationSubnet3
  # VPC Endpoint
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      RouteTableIds:
        - !Ref ApplicationRouteTable1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc
Outputs:
  VpcID:
    Value: !Ref Vpc
    Export:
      Name: !Sub ${AWS::StackName}-Vpc
  FrontendSubnet1:
    Value: !Ref FrontendSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-FrontendSubnet1
  FrontendSubnet2:
    Value: !Ref FrontendSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-FrontendSubnet2
  FrontendSubnet3:
    Value: !Ref FrontendSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-FrontendSubnet3
  ApplicationSubnet1:
    Value: !Ref ApplicationSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationSubnet1
  ApplicationSubnet2:
    Value: !Ref ApplicationSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationSubnet2
  ApplicationSubnet3:
    Value: !Ref ApplicationSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationSubnet3
  S3Endpoint:
    Value: !Ref S3Endpoint
    Export:
      Name: !Sub ${AWS::StackName}-S3Endpoint
